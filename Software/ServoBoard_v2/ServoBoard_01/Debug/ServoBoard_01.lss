
ServoBoard_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001ca  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000012d  00000000  00000000  00000592  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000014a  00000000  00000000  000006bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a6  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000164  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_14>
  3c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_15>
  40:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 30       	cpi	r26, 0x0B	; 11
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  88:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_twi>:

//init twi/i2c
void init_twi(void){

	//Set address of i2c slave
	TWAR |= (SLAVE_ADDRESS<<1) | (1<<TWGCE);
  90:	ea eb       	ldi	r30, 0xBA	; 186
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	85 68       	ori	r24, 0x85	; 133
  98:	80 83       	st	Z, r24
	TWCR |= (1<<TWEN) | (1<<TWEA);
  9a:	ec eb       	ldi	r30, 0xBC	; 188
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	84 64       	ori	r24, 0x44	; 68
  a2:	80 83       	st	Z, r24
	TWCR &= ~((1<<TWSTA) | (1<<TWSTO)) ;
  a4:	80 81       	ld	r24, Z
  a6:	8f 7c       	andi	r24, 0xCF	; 207
  a8:	80 83       	st	Z, r24
  aa:	08 95       	ret

000000ac <init_timer>:

//init timer
void init_timer(void){

	//TIMER0 (8bit) , Mode 3 - Fast PWM TOP = 0xFF ,Prescaler = 256 , Time per overflow = 0.004096 sec. = 4.096 ms (16Mhz Clock)
	TCCR0A |= (1<<WGM01) | (1<<WGM00);
  ac:	84 b5       	in	r24, 0x24	; 36
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02);
  b2:	85 b5       	in	r24, 0x25	; 37
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	85 bd       	out	0x25, r24	; 37

	//Enable TIMER0 Interrupts (Compare Match A/B and Overflow)
	TIMSK0 |= (1<<OCIE0A) | (1<<OCIE0B) | (1<<TOIE0);
  b8:	ee e6       	ldi	r30, 0x6E	; 110
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	87 60       	ori	r24, 0x07	; 7
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <__vector_14>:
}


//isr oc0a -> set pins  1-10 to 0
ISR(TIMER0_COMPA_vect){
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24

	PORTD &= ~(0xF0) ;
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	8f 70       	andi	r24, 0x0F	; 15
  d4:	8b b9       	out	0x0b, r24	; 11

}
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_15>:
//isr oc0b -> set pins 10-20 to 0
ISR(TIMER0_COMPB_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24

	PORTD &= ~(0x0F) ;
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	8b b9       	out	0x0b, r24	; 11

}
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_16>:
//isr tiov -> set pins  1-20 to 1 and set oc0a/oc0b values
ISR(TIMER0_OVF_vect){
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31

	switch (loop)
 11c:	80 91 00 01 	lds	r24, 0x0100
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	51 f0       	breq	.+20     	; 0x138 <__vector_16+0x38>
 124:	28 f0       	brcs	.+10     	; 0x130 <__vector_16+0x30>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	59 f0       	breq	.+22     	; 0x140 <__vector_16+0x40>
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	69 f0       	breq	.+26     	; 0x148 <__vector_16+0x48>
 12e:	0f c0       	rjmp	.+30     	; 0x14e <__vector_16+0x4e>
	{
		case 0:
		PORTD |= 0b00010001;
 130:	8b b1       	in	r24, 0x0b	; 11
 132:	81 61       	ori	r24, 0x11	; 17
 134:	8b b9       	out	0x0b, r24	; 11
		break;
 136:	0b c0       	rjmp	.+22     	; 0x14e <__vector_16+0x4e>
		case 1:
		PORTD |= 0b00100010;
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	82 62       	ori	r24, 0x22	; 34
 13c:	8b b9       	out	0x0b, r24	; 11
		break;
 13e:	07 c0       	rjmp	.+14     	; 0x14e <__vector_16+0x4e>
		case 2:
		PORTD |= 0b01000100;
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	84 64       	ori	r24, 0x44	; 68
 144:	8b b9       	out	0x0b, r24	; 11
		break;
 146:	03 c0       	rjmp	.+6      	; 0x14e <__vector_16+0x4e>
		case 3:
		PORTD |= 0b10001000;
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	88 68       	ori	r24, 0x88	; 136
 14c:	8b b9       	out	0x0b, r24	; 11
		break;
		default: break;
	}
	loop = (loop+1)%(NUM_SERVOS/2);
 14e:	80 91 00 01 	lds	r24, 0x0100
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	65 e0       	ldi	r22, 0x05	; 5
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	0e 94 1d 01 	call	0x23a	; 0x23a <__divmodhi4>
 15e:	80 93 00 01 	sts	0x0100, r24
	OCR0A = data[loop];
 162:	e0 91 00 01 	lds	r30, 0x0100
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ef 5f       	subi	r30, 0xFF	; 255
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	80 81       	ld	r24, Z
 16e:	87 bd       	out	0x27, r24	; 39
	OCR0B = data[loop+(NUM_SERVOS/2)];
 170:	e0 91 00 01 	lds	r30, 0x0100
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	ea 5f       	subi	r30, 0xFA	; 250
 178:	fe 4f       	sbci	r31, 0xFE	; 254
 17a:	80 81       	ld	r24, Z
 17c:	88 bd       	out	0x28, r24	; 40

}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <init_all>:

//init all
void init_all(void){

	for (int i=0;i<NUM_SERVOS;i++)
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
		{
			data[i] = 94;
		}
		else
		{
			data[i] = 64;
 19e:	30 e4       	ldi	r19, 0x40	; 64

	for (int i=0;i<NUM_SERVOS;i++)
	{
		if (i%2)
		{
			data[i] = 94;
 1a0:	2e e5       	ldi	r18, 0x5E	; 94
//init all
void init_all(void){

	for (int i=0;i<NUM_SERVOS;i++)
	{
		if (i%2)
 1a2:	80 ff       	sbrs	r24, 0
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <init_all+0x16>
		{
			data[i] = 94;
 1a6:	fc 01       	movw	r30, r24
 1a8:	ef 5f       	subi	r30, 0xFF	; 255
 1aa:	fe 4f       	sbci	r31, 0xFE	; 254
 1ac:	20 83       	st	Z, r18
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <init_all+0x1e>
		}
		else
		{
			data[i] = 64;
 1b0:	fc 01       	movw	r30, r24
 1b2:	ef 5f       	subi	r30, 0xFF	; 255
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	30 83       	st	Z, r19
}

//init all
void init_all(void){

	for (int i=0;i<NUM_SERVOS;i++)
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	8a 30       	cpi	r24, 0x0A	; 10
 1bc:	91 05       	cpc	r25, r1
 1be:	89 f7       	brne	.-30     	; 0x1a2 <init_all+0x8>
			data[i] = 64;
		}
		
	}

	init_twi();
 1c0:	0e 94 48 00 	call	0x90	; 0x90 <init_twi>

//init pins
void init_pins(void){

	//Pins PD0 - PD7 set as output for servos
	DDRD = 0xFF;
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	8a b9       	out	0x0a, r24	; 10

	init_twi();

	init_pins();

	init_timer();
 1c8:	0e 94 56 00 	call	0xac	; 0xac <init_timer>

	sei();
 1cc:	78 94       	sei
 1ce:	08 95       	ret

000001d0 <main>:



int main(void)
{
	init_all();
 1d0:	0e 94 cd 00 	call	0x19a	; 0x19a <init_all>
	int data_counter = 0;
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0


	//main -> get data (twi)
	while (1)
	{
		while (!(TWCR & (1<<TWINT))){}
 1d8:	ec eb       	ldi	r30, 0xBC	; 188
 1da:	f0 e0       	ldi	r31, 0x00	; 0

		switch(TWSR){
 1dc:	c9 eb       	ldi	r28, 0xB9	; 185
 1de:	d0 e0       	ldi	r29, 0x00	; 0
			case 0x60: //Received own address and write bit, ACK returned
			break;
			case 0x70: //Received general call and write bit, ACK returned
			break;
			case 0x80: //Addressed with own address and data byte received, ACK returned
			data[data_counter] = TWDR;
 1e0:	0f 2e       	mov	r0, r31
 1e2:	fb eb       	ldi	r31, 0xBB	; 187
 1e4:	ef 2e       	mov	r14, r31
 1e6:	f1 2c       	mov	r15, r1
 1e8:	f0 2d       	mov	r31, r0
			data_counter = (data_counter+1)%NUM_SERVOS;
 1ea:	0a e0       	ldi	r16, 0x0A	; 10
 1ec:	10 e0       	ldi	r17, 0x00	; 0


	//main -> get data (twi)
	while (1)
	{
		while (!(TWCR & (1<<TWINT))){}
 1ee:	90 81       	ld	r25, Z
 1f0:	99 23       	and	r25, r25
 1f2:	ec f7       	brge	.-6      	; 0x1ee <main+0x1e>

		switch(TWSR){
 1f4:	88 81       	ld	r24, Y
 1f6:	80 38       	cpi	r24, 0x80	; 128
 1f8:	19 f0       	breq	.+6      	; 0x200 <main+0x30>
 1fa:	80 39       	cpi	r24, 0x90	; 144
 1fc:	71 f0       	breq	.+28     	; 0x21a <main+0x4a>
 1fe:	19 c0       	rjmp	.+50     	; 0x232 <main+0x62>
			case 0x60: //Received own address and write bit, ACK returned
			break;
			case 0x70: //Received general call and write bit, ACK returned
			break;
			case 0x80: //Addressed with own address and data byte received, ACK returned
			data[data_counter] = TWDR;
 200:	d7 01       	movw	r26, r14
 202:	8c 91       	ld	r24, X
 204:	d9 01       	movw	r26, r18
 206:	af 5f       	subi	r26, 0xFF	; 255
 208:	be 4f       	sbci	r27, 0xFE	; 254
 20a:	8c 93       	st	X, r24
			data_counter = (data_counter+1)%NUM_SERVOS;
 20c:	c9 01       	movw	r24, r18
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	b8 01       	movw	r22, r16
 212:	0e 94 1d 01 	call	0x23a	; 0x23a <__divmodhi4>
 216:	9c 01       	movw	r18, r24
			break;
 218:	0c c0       	rjmp	.+24     	; 0x232 <main+0x62>
			case 0x90: //Addressed with general call and data byte received, ACK returned
			data[data_counter] = TWDR;
 21a:	d7 01       	movw	r26, r14
 21c:	8c 91       	ld	r24, X
 21e:	d9 01       	movw	r26, r18
 220:	af 5f       	subi	r26, 0xFF	; 255
 222:	be 4f       	sbci	r27, 0xFE	; 254
 224:	8c 93       	st	X, r24
			data_counter = (data_counter+1)%NUM_SERVOS;
 226:	c9 01       	movw	r24, r18
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	b8 01       	movw	r22, r16
 22c:	0e 94 1d 01 	call	0x23a	; 0x23a <__divmodhi4>
 230:	9c 01       	movw	r18, r24
			break;
		}
		
		//TWCR &= ~(1<<TWINT);
		TWCR |= (1<<TWINT); //reset von TWINT durch setzen????
 232:	90 81       	ld	r25, Z
 234:	90 68       	ori	r25, 0x80	; 128
 236:	90 83       	st	Z, r25
		




	}
 238:	da cf       	rjmp	.-76     	; 0x1ee <main+0x1e>

0000023a <__divmodhi4>:
 23a:	97 fb       	bst	r25, 7
 23c:	07 2e       	mov	r0, r23
 23e:	16 f4       	brtc	.+4      	; 0x244 <__divmodhi4+0xa>
 240:	00 94       	com	r0
 242:	07 d0       	rcall	.+14     	; 0x252 <__divmodhi4_neg1>
 244:	77 fd       	sbrc	r23, 7
 246:	09 d0       	rcall	.+18     	; 0x25a <__divmodhi4_neg2>
 248:	0e 94 31 01 	call	0x262	; 0x262 <__udivmodhi4>
 24c:	07 fc       	sbrc	r0, 7
 24e:	05 d0       	rcall	.+10     	; 0x25a <__divmodhi4_neg2>
 250:	3e f4       	brtc	.+14     	; 0x260 <__divmodhi4_exit>

00000252 <__divmodhi4_neg1>:
 252:	90 95       	com	r25
 254:	81 95       	neg	r24
 256:	9f 4f       	sbci	r25, 0xFF	; 255
 258:	08 95       	ret

0000025a <__divmodhi4_neg2>:
 25a:	70 95       	com	r23
 25c:	61 95       	neg	r22
 25e:	7f 4f       	sbci	r23, 0xFF	; 255

00000260 <__divmodhi4_exit>:
 260:	08 95       	ret

00000262 <__udivmodhi4>:
 262:	aa 1b       	sub	r26, r26
 264:	bb 1b       	sub	r27, r27
 266:	51 e1       	ldi	r21, 0x11	; 17
 268:	07 c0       	rjmp	.+14     	; 0x278 <__udivmodhi4_ep>

0000026a <__udivmodhi4_loop>:
 26a:	aa 1f       	adc	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	a6 17       	cp	r26, r22
 270:	b7 07       	cpc	r27, r23
 272:	10 f0       	brcs	.+4      	; 0x278 <__udivmodhi4_ep>
 274:	a6 1b       	sub	r26, r22
 276:	b7 0b       	sbc	r27, r23

00000278 <__udivmodhi4_ep>:
 278:	88 1f       	adc	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	5a 95       	dec	r21
 27e:	a9 f7       	brne	.-22     	; 0x26a <__udivmodhi4_loop>
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	bc 01       	movw	r22, r24
 286:	cd 01       	movw	r24, r26
 288:	08 95       	ret

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
