
Raspberry_PI_Servo_Hat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000304  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800100  00800100  00000378  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001be  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000fd  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000167  00000000  00000000  000006f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00000860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001bf  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000164  00000000  00000000  00000b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00000c6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_16>
  44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_17>
  48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_18>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  6c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  70:	b9 00       	.word	0x00b9	; ????
  72:	bc 00       	.word	0x00bc	; ????
  74:	bf 00       	.word	0x00bf	; ????
  76:	c2 00       	.word	0x00c2	; ????
  78:	c5 00       	.word	0x00c5	; ????
  7a:	c8 00       	.word	0x00c8	; ????
  7c:	cb 00       	.word	0x00cb	; ????
  7e:	ce 00       	.word	0x00ce	; ????
  80:	d1 00       	.word	0x00d1	; ????
  82:	d4 00       	.word	0x00d4	; ????
  84:	d7 00       	.word	0x00d7	; ????
  86:	da 00       	.word	0x00da	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d0 e1       	ldi	r29, 0x10	; 16
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_clear_bss>:
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
  9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
  9e:	a9 31       	cpi	r26, 0x19	; 25
  a0:	b2 07       	cpc	r27, r18
  a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
  a4:	0e 94 1d 01 	call	0x23a	; 0x23a <main>
  a8:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <init_twi>:

//init twi/i2c
void init_twi(void){

	//Set address of i2c slave
	TWAR |= (SLAVE_ADDRESS<<1) | (1<<TWGCE);
  b0:	ea eb       	ldi	r30, 0xBA	; 186
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	85 68       	ori	r24, 0x85	; 133
  b8:	80 83       	st	Z, r24
	TWCR |= (1<<TWEN) | (1<<TWEA);
  ba:	ec eb       	ldi	r30, 0xBC	; 188
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	84 64       	ori	r24, 0x44	; 68
  c2:	80 83       	st	Z, r24
	TWCR &= ~((1<<TWSTA) | (1<<TWSTO)) ;
  c4:	80 81       	ld	r24, Z
  c6:	8f 7c       	andi	r24, 0xCF	; 207
  c8:	80 83       	st	Z, r24
  ca:	08 95       	ret

000000cc <init_outputs>:
}

//INIT OUTPUTS
void init_outputs(void){

	DDRA = 0xFF; //Servo Outputs: PA0=SERVO_19 - PA7 = SERVO_12
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	81 b9       	out	0x01, r24	; 1
	DDRB = 0x1F; //Servo Outputs: PB0=SERVO_20 - PB4 = SERVO_24
  d0:	9f e1       	ldi	r25, 0x1F	; 31
  d2:	94 b9       	out	0x04, r25	; 4
	DDRC = 0xFC; //Servo Outputs: PC2=SERVO_6 - PC7 = SERVO_11
  d4:	9c ef       	ldi	r25, 0xFC	; 252
  d6:	97 b9       	out	0x07, r25	; 7
	DDRD = 0xFF; //Servo Outputs: PD3=SERVO_1 - PD7 = SERVO_5 ; LED Outputs: PD0 = LED_1 - PD2 = LED_3
  d8:	8a b9       	out	0x0a, r24	; 10
  da:	08 95       	ret

000000dc <init_timer>:

//INIT TIMER
void init_timer(void){

	//TIMER0 (8bit) , Mode 3 - Fast PWM TOP = 0xFF ,Prescaler = 256 , Time per overflow = 0.004096 sec. = 4.096 ms (16Mhz Clock)
	TCCR0A |= (1<<WGM01) | (1<<WGM00);
  dc:	84 b5       	in	r24, 0x24	; 36
  de:	83 60       	ori	r24, 0x03	; 3
  e0:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02);
  e2:	85 b5       	in	r24, 0x25	; 37
  e4:	84 60       	ori	r24, 0x04	; 4
  e6:	85 bd       	out	0x25, r24	; 37

	//Enable TIMER0 Interrupts (Compare Match A/B and Overflow)
	TIMSK0 |= (1<<OCIE0A) | (1<<OCIE0B) | (1<<TOIE0);
  e8:	ee e6       	ldi	r30, 0x6E	; 110
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	87 60       	ori	r24, 0x07	; 7
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <__vector_16>:
}


//ISR OC0A -> RESET SERVOS 1 - 12
ISR(TIMER0_COMPA_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	8f 93       	push	r24

	PORTD &= ~(0xF8) ;
 100:	8b b1       	in	r24, 0x0b	; 11
 102:	87 70       	andi	r24, 0x07	; 7
 104:	8b b9       	out	0x0b, r24	; 11
	PORTC &= ~(0xFC) ;
 106:	88 b1       	in	r24, 0x08	; 8
 108:	83 70       	andi	r24, 0x03	; 3
 10a:	88 b9       	out	0x08, r24	; 8
	PORTA &= ~(0x80) ;
 10c:	17 98       	cbi	0x02, 7	; 2

}
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_17>:
//ISR OC0A -> RESET SERVOS 13 - 24
ISR(TIMER0_COMPB_vect){
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24

	PORTA &= ~(0x7F) ;
 126:	82 b1       	in	r24, 0x02	; 2
 128:	80 78       	andi	r24, 0x80	; 128
 12a:	82 b9       	out	0x02, r24	; 2
	PORTB &= ~(0x1F) ;
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	80 7e       	andi	r24, 0xE0	; 224
 130:	85 b9       	out	0x05, r24	; 5

}
 132:	8f 91       	pop	r24
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <__vector_18>:
//ISR TIOV -> SET SERVO OUTPUTS AND SET CORRESPONDING OC0A/OC0B VALUES
ISR(TIMER0_OVF_vect){
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31

	switch (loop)
 15a:	e0 91 00 01 	lds	r30, 0x0100
 15e:	8e 2f       	mov	r24, r30
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	8c 30       	cpi	r24, 0x0C	; 12
 164:	91 05       	cpc	r25, r1
 166:	40 f5       	brcc	.+80     	; 0x1b8 <__vector_18+0x7a>
 168:	fc 01       	movw	r30, r24
 16a:	e8 5c       	subi	r30, 0xC8	; 200
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__tablejump2__>
	{
		case 0:
		PORTD |= (1<<PD3); //SERVO 1
 172:	5b 9a       	sbi	0x0b, 3	; 11
		PORTA |= (1<<PA6); //SERVO 13
 174:	16 9a       	sbi	0x02, 6	; 2
		break;
 176:	20 c0       	rjmp	.+64     	; 0x1b8 <__vector_18+0x7a>
		case 1:
		PORTD |= (1<<PD4); //SERVO 2
 178:	5c 9a       	sbi	0x0b, 4	; 11
		PORTA |= (1<<PA5); //SERVO 14
 17a:	15 9a       	sbi	0x02, 5	; 2
		break;
 17c:	1d c0       	rjmp	.+58     	; 0x1b8 <__vector_18+0x7a>
		case 2:
		PORTD |= (1<<PD5); //SERVO 3
 17e:	5d 9a       	sbi	0x0b, 5	; 11
		PORTA |= (1<<PA4); //SERVO 15
 180:	14 9a       	sbi	0x02, 4	; 2
		break;
 182:	1a c0       	rjmp	.+52     	; 0x1b8 <__vector_18+0x7a>
		case 3:
		PORTD |= (1<<PD6); //SERVO 4
 184:	5e 9a       	sbi	0x0b, 6	; 11
		PORTA |= (1<<PA3); //SERVO 16
 186:	13 9a       	sbi	0x02, 3	; 2
		break;
 188:	17 c0       	rjmp	.+46     	; 0x1b8 <__vector_18+0x7a>
		case 4:
		PORTD |= (1<<PD7); //SERVO 5
 18a:	5f 9a       	sbi	0x0b, 7	; 11
		PORTA |= (1<<PA2); //SERVO 17
 18c:	12 9a       	sbi	0x02, 2	; 2
		break;
 18e:	14 c0       	rjmp	.+40     	; 0x1b8 <__vector_18+0x7a>
		case 5:
		PORTC |= (1<<PC2); //SERVO 6
 190:	42 9a       	sbi	0x08, 2	; 8
		PORTA |= (1<<PA1); //SERVO 18
 192:	11 9a       	sbi	0x02, 1	; 2
		break;
 194:	11 c0       	rjmp	.+34     	; 0x1b8 <__vector_18+0x7a>
		case 6:
		PORTC |= (1<<PC3); //SERVO 7
 196:	43 9a       	sbi	0x08, 3	; 8
		PORTA |= (1<<PA0); //SERVO 19
 198:	10 9a       	sbi	0x02, 0	; 2
		break;
 19a:	0e c0       	rjmp	.+28     	; 0x1b8 <__vector_18+0x7a>
		case 7:
		PORTC |= (1<<PC4); //SERVO 8
 19c:	44 9a       	sbi	0x08, 4	; 8
		PORTB |= (1<<PB0); //SERVO 20
 19e:	28 9a       	sbi	0x05, 0	; 5
		break;
 1a0:	0b c0       	rjmp	.+22     	; 0x1b8 <__vector_18+0x7a>
		case 8:
		PORTC |= (1<<PC5); //SERVO 9
 1a2:	45 9a       	sbi	0x08, 5	; 8
		PORTB |= (1<<PB1); //SERVO 21
 1a4:	29 9a       	sbi	0x05, 1	; 5
		break;
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <__vector_18+0x7a>
		case 9:
		PORTC |= (1<<PC6); //SERVO 10
 1a8:	46 9a       	sbi	0x08, 6	; 8
		PORTB |= (1<<PB2); //SERVO 22
 1aa:	2a 9a       	sbi	0x05, 2	; 5
		break;
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <__vector_18+0x7a>
		case 10:
		PORTC |= (1<<PC7); //SERVO 11
 1ae:	47 9a       	sbi	0x08, 7	; 8
		PORTB |= (1<<PB3); //SERVO 23
 1b0:	2b 9a       	sbi	0x05, 3	; 5
		break;
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <__vector_18+0x7a>
		case 11:
		PORTA |= (1<<PA7); //SERVO 12
 1b4:	17 9a       	sbi	0x02, 7	; 2
		PORTB |= (1<<PB4); //SERVO 24
 1b6:	2c 9a       	sbi	0x05, 4	; 5
		break;
		default: break;
	}
	loop = (loop+1)%(NUM_SERVOS/2);
 1b8:	80 91 00 01 	lds	r24, 0x0100
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	6c e0       	ldi	r22, 0x0C	; 12
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__divmodhi4>
 1c8:	80 93 00 01 	sts	0x0100, r24
	OCR0A = data[loop];
 1cc:	e0 91 00 01 	lds	r30, 0x0100
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ef 5f       	subi	r30, 0xFF	; 255
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	80 81       	ld	r24, Z
 1d8:	87 bd       	out	0x27, r24	; 39
	OCR0B = data[loop+(NUM_SERVOS/2)];
 1da:	e0 91 00 01 	lds	r30, 0x0100
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	e3 5f       	subi	r30, 0xF3	; 243
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	80 81       	ld	r24, Z
 1e6:	88 bd       	out	0x28, r24	; 40

}
 1e8:	ff 91       	pop	r31
 1ea:	ef 91       	pop	r30
 1ec:	bf 91       	pop	r27
 1ee:	af 91       	pop	r26
 1f0:	9f 91       	pop	r25
 1f2:	8f 91       	pop	r24
 1f4:	7f 91       	pop	r23
 1f6:	6f 91       	pop	r22
 1f8:	5f 91       	pop	r21
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <init_all>:

//init all
void init_all(void){

	for (int i=0;i<NUM_SERVOS;i++)
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
		{
			data[i] = 94;
		}
		else
		{
			data[i] = 64;
 208:	30 e4       	ldi	r19, 0x40	; 64

	for (int i=0;i<NUM_SERVOS;i++)
	{
		if (i%2)
		{
			data[i] = 94;
 20a:	2e e5       	ldi	r18, 0x5E	; 94
//init all
void init_all(void){

	for (int i=0;i<NUM_SERVOS;i++)
	{
		if (i%2)
 20c:	80 ff       	sbrs	r24, 0
 20e:	05 c0       	rjmp	.+10     	; 0x21a <init_all+0x16>
		{
			data[i] = 94;
 210:	fc 01       	movw	r30, r24
 212:	ef 5f       	subi	r30, 0xFF	; 255
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	20 83       	st	Z, r18
 218:	04 c0       	rjmp	.+8      	; 0x222 <init_all+0x1e>
		}
		else
		{
			data[i] = 64;
 21a:	fc 01       	movw	r30, r24
 21c:	ef 5f       	subi	r30, 0xFF	; 255
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	30 83       	st	Z, r19
}

//init all
void init_all(void){

	for (int i=0;i<NUM_SERVOS;i++)
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	88 31       	cpi	r24, 0x18	; 24
 226:	91 05       	cpc	r25, r1
 228:	89 f7       	brne	.-30     	; 0x20c <init_all+0x8>
			data[i] = 64;
		}
		
	}

	init_twi();
 22a:	0e 94 58 00 	call	0xb0	; 0xb0 <init_twi>

	init_outputs();
 22e:	0e 94 66 00 	call	0xcc	; 0xcc <init_outputs>

	init_timer();
 232:	0e 94 6e 00 	call	0xdc	; 0xdc <init_timer>

	sei();
 236:	78 94       	sei
 238:	08 95       	ret

0000023a <main>:



int main(void)
{
	init_all();
 23a:	0e 94 02 01 	call	0x204	; 0x204 <init_all>
	int data_counter = 0;
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0


	//main -> get data (twi)
	while (1)
	{
		while (!(TWCR & (1<<TWINT))){}
 242:	ec eb       	ldi	r30, 0xBC	; 188
 244:	f0 e0       	ldi	r31, 0x00	; 0

		switch(TWSR){
 246:	c9 eb       	ldi	r28, 0xB9	; 185
 248:	d0 e0       	ldi	r29, 0x00	; 0
			case 0x60: //Received own address and write bit, ACK returned
			break;
			case 0x70: //Received general call and write bit, ACK returned
			break;
			case 0x80: //Addressed with own address and data byte received, ACK returned
			data[data_counter] = TWDR;
 24a:	0f 2e       	mov	r0, r31
 24c:	fb eb       	ldi	r31, 0xBB	; 187
 24e:	ef 2e       	mov	r14, r31
 250:	f1 2c       	mov	r15, r1
 252:	f0 2d       	mov	r31, r0
			data_counter = (data_counter+1)%NUM_SERVOS;
 254:	08 e1       	ldi	r16, 0x18	; 24
 256:	10 e0       	ldi	r17, 0x00	; 0


	//main -> get data (twi)
	while (1)
	{
		while (!(TWCR & (1<<TWINT))){}
 258:	90 81       	ld	r25, Z
 25a:	99 23       	and	r25, r25
 25c:	ec f7       	brge	.-6      	; 0x258 <main+0x1e>

		switch(TWSR){
 25e:	88 81       	ld	r24, Y
 260:	80 38       	cpi	r24, 0x80	; 128
 262:	19 f0       	breq	.+6      	; 0x26a <main+0x30>
 264:	80 39       	cpi	r24, 0x90	; 144
 266:	71 f0       	breq	.+28     	; 0x284 <main+0x4a>
 268:	19 c0       	rjmp	.+50     	; 0x29c <main+0x62>
			case 0x60: //Received own address and write bit, ACK returned
			break;
			case 0x70: //Received general call and write bit, ACK returned
			break;
			case 0x80: //Addressed with own address and data byte received, ACK returned
			data[data_counter] = TWDR;
 26a:	d7 01       	movw	r26, r14
 26c:	8c 91       	ld	r24, X
 26e:	d9 01       	movw	r26, r18
 270:	af 5f       	subi	r26, 0xFF	; 255
 272:	be 4f       	sbci	r27, 0xFE	; 254
 274:	8c 93       	st	X, r24
			data_counter = (data_counter+1)%NUM_SERVOS;
 276:	c9 01       	movw	r24, r18
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	b8 01       	movw	r22, r16
 27c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__divmodhi4>
 280:	9c 01       	movw	r18, r24
			break;
 282:	0c c0       	rjmp	.+24     	; 0x29c <main+0x62>
			case 0x90: //Addressed with general call and data byte received, ACK returned
			data[data_counter] = TWDR;
 284:	d7 01       	movw	r26, r14
 286:	8c 91       	ld	r24, X
 288:	d9 01       	movw	r26, r18
 28a:	af 5f       	subi	r26, 0xFF	; 255
 28c:	be 4f       	sbci	r27, 0xFE	; 254
 28e:	8c 93       	st	X, r24
			data_counter = (data_counter+1)%NUM_SERVOS;
 290:	c9 01       	movw	r24, r18
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	b8 01       	movw	r22, r16
 296:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__divmodhi4>
 29a:	9c 01       	movw	r18, r24
			break;
		}
		
		//TWCR &= ~(1<<TWINT);
		TWCR |= (1<<TWINT); //reset von TWINT durch setzen????
 29c:	90 81       	ld	r25, Z
 29e:	90 68       	ori	r25, 0x80	; 128
 2a0:	90 83       	st	Z, r25
		




	}
 2a2:	da cf       	rjmp	.-76     	; 0x258 <main+0x1e>

000002a4 <__divmodhi4>:
 2a4:	97 fb       	bst	r25, 7
 2a6:	07 2e       	mov	r0, r23
 2a8:	16 f4       	brtc	.+4      	; 0x2ae <__divmodhi4+0xa>
 2aa:	00 94       	com	r0
 2ac:	07 d0       	rcall	.+14     	; 0x2bc <__divmodhi4_neg1>
 2ae:	77 fd       	sbrc	r23, 7
 2b0:	09 d0       	rcall	.+18     	; 0x2c4 <__divmodhi4_neg2>
 2b2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__udivmodhi4>
 2b6:	07 fc       	sbrc	r0, 7
 2b8:	05 d0       	rcall	.+10     	; 0x2c4 <__divmodhi4_neg2>
 2ba:	3e f4       	brtc	.+14     	; 0x2ca <__divmodhi4_exit>

000002bc <__divmodhi4_neg1>:
 2bc:	90 95       	com	r25
 2be:	81 95       	neg	r24
 2c0:	9f 4f       	sbci	r25, 0xFF	; 255
 2c2:	08 95       	ret

000002c4 <__divmodhi4_neg2>:
 2c4:	70 95       	com	r23
 2c6:	61 95       	neg	r22
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255

000002ca <__divmodhi4_exit>:
 2ca:	08 95       	ret

000002cc <__tablejump2__>:
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	05 90       	lpm	r0, Z+
 2d2:	f4 91       	lpm	r31, Z
 2d4:	e0 2d       	mov	r30, r0
 2d6:	09 94       	ijmp

000002d8 <__udivmodhi4>:
 2d8:	aa 1b       	sub	r26, r26
 2da:	bb 1b       	sub	r27, r27
 2dc:	51 e1       	ldi	r21, 0x11	; 17
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <__udivmodhi4_ep>

000002e0 <__udivmodhi4_loop>:
 2e0:	aa 1f       	adc	r26, r26
 2e2:	bb 1f       	adc	r27, r27
 2e4:	a6 17       	cp	r26, r22
 2e6:	b7 07       	cpc	r27, r23
 2e8:	10 f0       	brcs	.+4      	; 0x2ee <__udivmodhi4_ep>
 2ea:	a6 1b       	sub	r26, r22
 2ec:	b7 0b       	sbc	r27, r23

000002ee <__udivmodhi4_ep>:
 2ee:	88 1f       	adc	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	5a 95       	dec	r21
 2f4:	a9 f7       	brne	.-22     	; 0x2e0 <__udivmodhi4_loop>
 2f6:	80 95       	com	r24
 2f8:	90 95       	com	r25
 2fa:	bc 01       	movw	r22, r24
 2fc:	cd 01       	movw	r24, r26
 2fe:	08 95       	ret

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
